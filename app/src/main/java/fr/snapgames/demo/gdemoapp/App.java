/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fr.snapgames.demo.gdemoapp;

import fr.snapgames.demo.core.Game;

import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * The main class for our application extending the Game interface.
 *
 * @author Frédéric Delorme
 * @since 0.0.1
 */
public class App implements Game {


    /**
     * Internal loop counter
     */
    private long updateTestCounter = -1;
    /**
     * the target exit value for loop counter in test mode.
     */
    private long exitValueTestCounter = -1;

    /**
     * Configuration attributes map.
     */
    private Map<ConfigAttribute, Object> configurationValues = new ConcurrentHashMap<>();

    /**
     * exit required if true
     */
    private boolean exitFlag = false;

    /**
     * pause required if true
     */
    private boolean pauseFlag = false;

    /**
     * Debug mode activation if greater than 0.
     */
    private int debugMode = 0;
    /**
     * targeted frame per second for rendering and loop processing.
     */
    private int targetFPS = 60;

    @Override
    public String getAppName() {
        return "GDemoApp";
    }

    @Override
    public int initialize(String[] args) {
        System.out.printf("Start %s%n- initializing...%n", getAppName());
        if (parseArgs(args) == 0) {
            debugMode = (int) configurationValues.get(ConfigAttribute.DEBUG_MODE);
            exitValueTestCounter = (int) configurationValues.get(ConfigAttribute.EXIT_TEST_COUNT_FRAME);
            updateTestCounter = 0;
            return 0;
        }
        return -1;
    }

    /**
     * Parse All CLI arguments to capture configuration with help of {@link ConfigAttribute}.
     *
     * @param args list of command line arguments from Java call.
     * @return 0 if all is ok, else -1.
     */
    private int parseArgs(String[] args) {
        boolean displayHelpMessage = false;
        // initialize all default values.
        Arrays.stream(ConfigAttribute.values()).forEach(ca -> {
            configurationValues.put(ca, ca.getDefaultValue());
        });
        for (String arg : args) {
            String[] kv = arg.split("=");
            if (!isArgumentFound(kv)) {
                displayHelpMessage(kv[0], kv[1]);
                return -1;
            }
        }
        if (displayHelpMessage) {
            displayHelpMessage();
        }
        return 0;
    }

    private boolean isArgumentFound(String[] kv) {
        boolean found = false;
        for (ConfigAttribute ca : ConfigAttribute.values()) {
            if (ca.getAttrName().equals(kv[0])) {
                configurationValues.put(ca, ca.getAttrParser().apply(kv[1]));
                found = true;
            }
        }
        return found;
    }

    /**
     * Display an error message if argument unknownAttributeName is unknown.
     *
     * @param unknownAttributeName the unknown argument.
     * @param attributeValue       the value for this unknown argument.
     */
    private void displayHelpMessage(String unknownAttributeName, String attributeValue) {
        System.out.printf("The argument %s=%s is unknown %n", unknownAttributeName, attributeValue);
        displayHelpMessage();
    }

    /**
     * Display CLI argument help message based on values from the {@link ConfigAttribute} enum.
     */
    private void displayHelpMessage() {
        System.out.printf("Here is the list of possible arguments:%n--%n");
        Arrays.stream(ConfigAttribute.values()).forEach(ca -> {
            System.out.printf("- %s : %s (default value is %s)%n",
                    ca.getAttrName(),
                    ca.getAttrDescription(),
                    ca.getDefaultValue().toString());
        });
        System.out.printf("%n--%n%n");
    }

    @Override
    public void create(Game g) {
        System.out.printf("- create stuff for %s%n", getAppName());
    }

    @Override
    public void input(Game g) {
        System.out.printf("- Loop %d:%n  - handle input%n", updateTestCounter);
    }

    @Override
    public void update(Game g, double elapsed) {
        System.out.printf("- update thing %f%n", elapsed);
        updateTestCounter += 1;
    }

    @Override
    public void render(Game g, int fps) {
        System.out.printf("- render thing at %d FPS%n", fps);
    }

    @Override
    public int getTargetFps() {
        return targetFPS;
    }

    @Override
    public void dispose() {
        if (debugMode > 0) {
            System.out.printf("debugMode=%d: Main game loop executed %d times (as required %d).%n",
                    debugMode,
                    updateTestCounter,
                    exitValueTestCounter);
        }
        System.out.printf("End of %s%n", getAppName());
    }

    @Override
    public boolean isPaused() {
        return pauseFlag;
    }

    @Override
    public boolean isExitRequested() {
        return (debugMode > 0 && updateTestCounter != -1 && updateTestCounter == exitValueTestCounter) || exitFlag;
    }

    /**
     * retrieve internal loop counter (for debug &gt; test mode only).
     *
     * @return the value of the internal loop counter.
     */
    public long getUpdateTestCounter() {
        return updateTestCounter;
    }

    /**
     * return the level of debug mode.
     *
     * @return the level of debug from 0 to 5.
     */
    public int getDebugMode() {
        return debugMode;
    }

    /**
     * return the trigger value  to exit from loop ni test mode.
     *
     * @return the value of the test max number of loop.
     */
    public long getExitValueTestCounter() {
        return exitValueTestCounter;
    }

    /**
     * The main entry for our application.
     *
     * @param args the list of args communicated by CLI
     */
    public static void main(String[] args) {
        App app = new App();
        app.run(args);
    }

}
