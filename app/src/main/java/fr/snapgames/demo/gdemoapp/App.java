/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fr.snapgames.demo.gdemoapp;

import fr.snapgames.demo.core.Game;
import fr.snapgames.demo.core.Utils;
import fr.snapgames.demo.core.configuration.Configuration;
import fr.snapgames.demo.core.entity.Camera;
import fr.snapgames.demo.core.entity.EntityManager;
import fr.snapgames.demo.core.gfx.Renderer;
import fr.snapgames.demo.core.gfx.Window;
import fr.snapgames.demo.core.io.InputHandler;
import fr.snapgames.demo.core.io.events.CommonGameKeyListener;
import fr.snapgames.demo.core.physic.PhysicEngine;
import fr.snapgames.demo.core.scene.SceneManager;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Map;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

/**
 * Define a common Game interface with some default implementation for main core
 * function.
 * <p>
 * Basically the Game is started by a call to the run() method, and :
 * <ul>
 * <li>run first execute the {@link Game#initialize(String[])},</li>
 * <li>and if initialization is ok (=0), call {@link Game#create()},</li>
 * <li>then call the {@link Game#loop()}, until a {@link Game#isExitRequested()}
 * become true</li>
 * <li>and finally call the #{@link Game#dispose()} to free all reserved
 * resources.</li>
 * </ul>
 *
 * @author Frédéric Delorme
 * @since 0.0.1
 */
public class App implements Game {

    // Logger management
    private static final LogManager logManager = LogManager.getLogManager();
    private static final Logger logger = Logger.getLogger(App.class.getName());

    static {
        try {
            logManager.readConfiguration(App.class.getResourceAsStream("/logging.properties"));
        } catch (IOException exception) {
            logger.log(Level.SEVERE, "Cannot read configuration file", exception);
        }
    }

    // Configuration attributes
    Configuration config = new Configuration(ConfigAttribute.values());

    /**
     * Internal loop counter
     */
    private long updateTestCounter = -1;
    /**
     * the target exit value for loop counter in test mode.
     */
    private long exitValueTestCounter = -1;

    /**
     * internal time tracking counter.
     */
    private long appStartTime = 0;

    /**
     * exit required if true
     */
    private boolean exitFlag = false;

    /**
     * pause required if true
     */
    private boolean pauseFlag = false;

    /**
     * Debug mode activation if greater than 0.
     */
    private int debugMode = 0;
    /**
     * targeted frame per second for rendering and loop processing.
     */
    private int targetFPS = 60;

    private int targetUPS = 60;

    /**
     * Window to display our game app.
     */
    private Window window;

    /**
     * The InputHandler to support mouse and key events
     */
    private InputHandler inputHandler;

    /**
     * The Renderer service to use to draw ion window.
     */
    private Renderer renderer;

    /**
     * Entity manager to hold al the game entities
     */
    private EntityManager entityMgr;

    /**
     * Physic computation engine
     */
    private PhysicEngine physicEngine;

    private SceneManager sceneMgr;

    /**
     * Displayed application title on the screen/window.
     */
    private String appTitle = "Game101";


    /**
     * Default application constructor.
     */
    public App() {
        config.setConfigurationFile("/config.properties");
    }

    /**
     * a specific constructor for test and debug mode.
     *
     * @param configFile the configuration file to be loaded.
     */
    public App(String configFile) {
        config.setConfigurationFile(configFile);
    }

    @Override
    public String getAppName() {
        return appTitle;
    }

    @Override
    public int initialize(String[] args) {
        logger.log(Level.INFO, "Start {0}%n- initializing...%n", getAppName());

        appStartTime = System.currentTimeMillis();

        int initStatus = applyConfiguration(args);
        // initialize your system and services from here
        window = new Window(
                (String) config.get(ConfigAttribute.APP_TITLE),
                (int) config.get(ConfigAttribute.WINDOW_WIDTH),
                (int) config.get(ConfigAttribute.WINDOW_HEIGHT))
                .setIcon("/images/sg-logo-image.png");

        inputHandler = new InputHandler();
        inputHandler.addListener(new CommonGameKeyListener(this));
        window.addListener(inputHandler);

        entityMgr = new EntityManager();
        renderer = new Renderer(this);
        physicEngine = new PhysicEngine(this);
        sceneMgr = new SceneManager(this);


        logger.log(Level.INFO, "- initialization done.");
        return initStatus;
    }

    /**
     * Request configuration file all the config values to initialize internals.
     * It also parses the provided CLI args to override configuration value if
     * necessary.
     *
     * @param args a String array containing the CLI arguments from the main method.
     * @return 0 is ok, other value is an issue.
     */
    public int applyConfiguration(String[] args) {
        int initStatus = config.parseConfigFile();
        if (initStatus == 0) {
            extractConfigurationValues();
            logger.log(Level.INFO, "Start {0}", getAppName());
            logger.log(Level.INFO, "- initializing...");
            initStatus = config.parseArgs(args);
            if (initStatus == 0) {
                extractConfigurationValues();
            }
        }
        return initStatus;
    }

    /**
     * from loaded file, extract configuration values ad set corresponding internal
     * App attributes.
     */
    private void extractConfigurationValues() {
        appTitle = (String) config.get(ConfigAttribute.APP_TITLE);
        debugMode = (int) config.get(ConfigAttribute.DEBUG_MODE);
        exitValueTestCounter = (int) config.get(ConfigAttribute.EXIT_TEST_COUNT_FRAME);
        targetFPS = (int) config.get(ConfigAttribute.RENDER_FPS);
        targetUPS = (int) config.get(ConfigAttribute.PHYSIC_UPS);
        updateTestCounter = 0;
    }


    @Override
    public void loadResources() {
        sceneMgr.getCurrent().prepare(this);
    }


    @Override
    public void create() {
        logger.log(Level.INFO, "- create stuff for {0}", getAppName());
        sceneMgr.getCurrent().create(this);
    }


    @Override
    public void input(Game g) {
        logger.log(Level.FINEST, "- Loop {0}:", updateTestCounter);
        logger.log(Level.FINEST, "  - handle input");
        if (inputHandler.isKeyPressed(KeyEvent.VK_ESCAPE)) {
            requestExit(true);
            logger.log(Level.FINEST, "    - key {} has been released",
                    new Object[]{KeyEvent.getKeyText(KeyEvent.VK_ESCAPE)});
        }
        sceneMgr.getCurrent().input(this);
    }

    @Override
    public void update(Game g, Map<String, Object> attributes, double elapsed) {
        int ups = (int) attributes.get("game.ups");
        logger.log(Level.FINEST, "  - update thing {0} at {1} u/s", new Object[]{elapsed, ups});
        updateTestCounter += 1;
        physicEngine.update(elapsed);
        if (Optional.ofNullable(sceneMgr.getCurrent().getCamera()).isPresent()) {
            sceneMgr.getCurrent().getCamera().update(elapsed);
        }

        sceneMgr.getCurrent().update(this, elapsed);
    }

    @Override
    public void render(Game g, Map<String, Object> attributes) {
        int fps = (int) attributes.get("game.fps");
        logger.log(Level.FINEST, "  - render thing at {0} FPS", fps);
        logger.log(Level.FINEST, "  - render thing at {0} FPS", fps);
        renderer.draw(attributes);
        sceneMgr.getCurrent().draw(this, renderer);
        renderer.drawToWindow(window);
    }

    @Override
    public int getTargetUps() {
        return targetUPS;
    }

    @Override
    public int getTargetFps() {
        return targetFPS;
    }

    @Override
    public void dispose() {
        if (debugMode > 0) {
            logger.log(Level.INFO, "debugMode={0}: Main game loop executed {1} times (as required {2}).", new Object[]{
                    debugMode,
                    updateTestCounter,
                    exitValueTestCounter});
        }
        sceneMgr.dispose();
        window.close();
        long duration = System.currentTimeMillis() - appStartTime;
        logger.log(Level.INFO, "executed in {0} ms ({1})", new Object[]{duration, Utils.formatDuration(duration)});
        logger.log(Level.INFO, "End of {0}", getAppName());
    }

    @Override
    public boolean isPaused() {
        return pauseFlag;
    }

    @Override
    public void resetScene() {
        if (!renderer.isRendering()) {
            entityMgr.reset();
            sceneMgr.getCurrent().create(this);
        }
    }

    @Override
    public boolean isExitRequested() {
        return (debugMode > 0 && updateTestCounter != -1 && updateTestCounter == exitValueTestCounter) || exitFlag;
    }

    @Override
    public Configuration getConfiguration() {
        return config;
    }

    @Override
    public EntityManager getEntityManager() {
        return entityMgr;
    }

    @Override
    public void requestExit(boolean exit) {
        this.exitFlag = exit;
    }

    @Override
    public void setDebugMode(int d) {
        debugMode = d;
    }

    @Override
    public void requestPause(boolean pause) {
        pauseFlag = pause;
    }

    /**
     * retrieve internal loop counter (for debug &gt; test mode only).
     *
     * @return the value of the internal loop counter.
     */
    public long getUpdateTestCounter() {
        return updateTestCounter;
    }

    @Override
    public int getDebugMode() {
        return debugMode;
    }

    @Override
    public double getFPS() {
        return targetFPS;
    }

    @Override
    public Renderer getRenderer() {
        return this.renderer;
    }

    @Override
    public InputHandler getInputHandler() {
        return inputHandler;
    }

    @Override
    public SceneManager getSceneManager() {
        return sceneMgr;
    }

    @Override
    public PhysicEngine getPhysicEngine() {
        return physicEngine;
    }

    @Override
    public Window getWindow() {
        return window;
    }

    /**
     * return the trigger value to exit from loop ni test mode.
     *
     * @return the value of the test max number of loop.
     */
    public long getExitValueTestCounter() {
        return exitValueTestCounter;
    }

    /**
     * Retrieve the time elapsed since initialization start.
     *
     * @return the time elapsed since initialization start
     */
    public long getInternalTime() {
        return System.currentTimeMillis() - appStartTime;
    }


    /**
     * The main entry for our application.
     *
     * @param args the list of args communicated by CLI
     */
    public static void main(String[] args) {
        App app = new App();
        app.run(args);
    }

}
