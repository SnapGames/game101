/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fr.snapgames.demo.gdemoapp;

import fr.snapgames.demo.core.Game;

/**
 * The main class for our application extending the Game interface.
 *
 * @author Frédéric Delorme
 * @since 0.0.1
 */
public class App implements Game {


    /**
     * Internal loop counter
     */
    private long updateTestCounter = -1;
    /**
     * the target exit value for loop counter in test mode.
     */
    private long exitValueTestCounter = -1;

    /**
     * exit required if true
     */
    private boolean exitFlag = false;

    /**
     * pause required if true
     */
    private boolean pauseFlag = false;

    /**
     * Debug mode activation if greater than 0.
     */
    private int debugMode = 0;
    /**
     * targeted frame per second for rendering and loop processing.
     */
    private int targetFPS = 60;

    @Override
    public void initialize(String[] args) {
        System.out.printf("Start%n- initialize thing%n");
        parseArgs(args);
    }

    /**
     * parse all CLI arguments to compare values and activate corresponding options.
     *
     * @param args list of arguments from CLI.
     */
    private void parseArgs(String[] args) {
        for (String arg : args) {
            String[] kv = arg.split("=");
            switch (kv[0]) {
                case "debugMode" -> {
                    debugMode = Integer.valueOf(kv[1]);
                }
                case "testCounter" -> {
                    updateTestCounter = 0;
                    exitValueTestCounter = Long.valueOf(kv[1]);
                }
            }

        }
    }

    @Override
    public void create(Game g) {
        System.out.printf("- create thing%n");

    }

    @Override
    public void input(Game g) {
        System.out.printf("- handle input%n");
    }

    @Override
    public void update(Game g, double elapsed) {
        System.out.printf("- update thing %f%n", elapsed);
        updateTestCounter += 1;
    }

    @Override
    public void render(Game g, int fps) {
        System.out.printf("- render thing at %d FPS%n", fps);
    }

    @Override
    public int getTargetFps() {
        return targetFPS;
    }

    @Override
    public void dispose() {
        System.out.printf("exexuted %d times%n", updateTestCounter);
        System.out.printf("End%n");
    }

    @Override
    public boolean isPaused() {
        return pauseFlag;
    }

    @Override
    public boolean isExitRequested() {
        return (debugMode > 0 && updateTestCounter != -1 && updateTestCounter == exitValueTestCounter) || exitFlag;
    }

    /**
     * retrieve internal loop counter (for debug &gt; test mode only).
     *
     * @return the value of the internal loop counter.
     */
    public long getUpdateTestCounter() {
        return updateTestCounter;
    }

    /**
     * return the level of debug mode.
     *
     * @return the level of debug from 0 to 5.
     */
    public int getDebugMode() {
        return debugMode;
    }

    /**
     * return the trigger value  to exit from loop ni test mode.
     *
     * @return the value of the test max number of loop.
     */
    public long getExitValueTestCounter() {
        return exitValueTestCounter;
    }

    /**
     * The main entry for our application.
     *
     * @param args the list of args communicated by CLI
     */
    public static void main(String[] args) {
        App app = new App();
        app.run(args);
    }

}
